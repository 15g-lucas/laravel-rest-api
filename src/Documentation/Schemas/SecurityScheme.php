<?php

namespace Lomkit\Rest\Documentation\Schemas;

class SecurityScheme extends Schema
{
    /**
     * The type of the security scheme. Valid values are "apiKey", "http", "mutualTLS", "oauth2", "openIdConnect".
     *
     * @var string
     */
    protected string $type;

    /**
     * A description for security scheme. CommonMark syntax MAY be used for rich text representation.
     *
     * @var string
     */
    protected string $description;

    /**
     * The name of the header, query or cookie parameter to be used.
     *
     * @var string
     */
    protected string $name;

    /**
     * The location of the API key. Valid values are "query", "header" or "cookie".
     *
     * @var string
     */
    protected string $in;

    /**
     * The name of the HTTP Authorization scheme to be used in the Authorization header as defined in [RFC7235]. The values used SHOULD be registered in the IANA Authentication Scheme registry.
     *
     * @var string
     */
    protected string $scheme;

    /**
     * A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes.
     *
     * @var string
     */
    protected string $bearerFormat;

    /**
     * An object containing configuration information for the flow types supported.
     *
     * @var OauthFlows
     */
    protected OauthFlows $flows;

    /**
     * OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of a URL. The OpenID Connect standard requires the use of TLS.
     *
     * @var string
     */
    protected string $openIdConnectUrl;

    public function withType(string $type): SecurityScheme
    {
        $this->type = $type;

        return $this;
    }

    public function type(): string
    {
        return $this->type;
    }

    public function withDescription(string $description): SecurityScheme
    {
        $this->description = $description;

        return $this;
    }

    public function description(): string
    {
        return $this->description;
    }

    public function withName(string $name): SecurityScheme
    {
        $this->name = $name;

        return $this;
    }

    public function name(): string
    {
        return $this->name;
    }

    public function withIn(string $in): SecurityScheme
    {
        $this->in = $in;

        return $this;
    }

    public function in(): string
    {
        return $this->in;
    }

    public function withScheme(string $scheme): SecurityScheme
    {
        $this->scheme = $scheme;

        return $this;
    }

    public function scheme(): string
    {
        return $this->scheme;
    }

    public function withBearerFormat(string $bearerFormat): SecurityScheme
    {
        $this->bearerFormat = $bearerFormat;

        return $this;
    }

    public function bearerFormat(): string
    {
        return $this->bearerFormat;
    }

    public function withFlows(OauthFlows $flows): SecurityScheme
    {
        $this->flows = $flows;

        return $this;
    }

    public function flows(): OauthFlows
    {
        return $this->flows;
    }

    public function withOpenIdConnectUrl(string $openIdConnectUrl): SecurityScheme
    {
        $this->openIdConnectUrl = $openIdConnectUrl;

        return $this;
    }

    public function openIdConnectUrl(): string
    {
        return $this->openIdConnectUrl;
    }

    public function generate(): SecurityScheme
    {
        return $this;
    }

    public function jsonSerialize(): mixed
    {
        return array_merge(
            isset($this->scheme) ? ['scheme' => $this->scheme()] : [],
            isset($this->in) ? ['in' => $this->in()] : [],
            isset($this->flows) ? ['flows' => $this->flows()->jsonSerialize()] : [],
            isset($this->description) ? ['description' => $this->description()] : [],
            isset($this->type) ? ['type' => $this->type()] : [],
            isset($this->name) ? ['name' => $this->name()] : [],
            isset($this->openIdConnectUrl) ? ['openIdConnectUrl' => $this->openIdConnectUrl()] : [],
        );
    }
}
